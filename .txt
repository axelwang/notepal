Hello everyone, welcome to Programming Credit. This is the continuation of the last video where we worked on audio transcription summarization using ChargeGPD, but the code was all in Google Colab. So if you have not watched that video and if you want a detailed code walkthrough, you can watch that video first and then come back to this video because in this video what we will try to do is we will try to create a stream data. So basically there will be a frontend using which the users can interact with that application and they don't need to fiddle around the code itself. So if you are someone who knows the nitty-gritty of the code, you can definitely use it in your Google Colab or in your JupyterLab. But if you are someone who is from non-technical background and who just wants a simple UI where they can interact with the large-ranging model, I think this is going to be really helpful for you. So yeah, this is what exactly we will be working on in this video. But before moving further, if you are new here or if you are a subscriber to the channel, please go ahead and subscribe to the channel and be a part of the Programming Credit family. And also hit the bell icon so that you get notified each time when a video goes live. And if you end up liking this video or find this video helpful, please give it a thumbs up. It keeps me motivated to make such videos for you guys. And if you want to be a part of the Programming Credit community, you can also join the Telegram group or Discord server. Link will be in the description. So with that being said, let's get this video started. First, let me give you a walkthrough of the application itself. It's a fairly straightforward application. And then I will take you to the code and I will give you a code walkthrough. So when you start the StreamGrid app, you will get the option to upload your audio file, which you can upload using this Browse Files button. And once you upload your file, we will use the Google services to transcribe the audio. And then we will pass this transcription to the chat GPT API to summarize it for you. And then you will be able to see the summary here. So this is basically a small snippet from one of my videos. So I extracted the audio and I took one minute audio from that full audio file and then I tried summarizing it. Now let's jump into the code and see what we have to do to create this simple UI to interact with the model to summarize the audio transcription. So in this video, I will not talk about the specifics or the description of each and every line because I've already explained this in the last video. But what I will do is I will talk about the StreamGrid part of it. So on top here, we have all the imports. Most notably, or the different one from the last video is this StreamGrid one, using which we will use different features from StreamGrid. In this line 7, I am reading the secrets from this secrets file, secrets.toml. So I have added my API key there. So if I have to show you, you can see how the secrets.toml looks like. I've just created a header here and then I've stored the API key. And if I have to call it in my app.py file, I am just going to do st.secrets and then I will read the API key. Now I will use this API key to create an object of OpenAI. Now here I am just setting the system prompt and this is the function which will transcribe the audio. And now this is going to be the function where all the summarization will happen. So in this function, I am calling transcribeAudio to get the transcripts. And then here I am also calling the message function where I am creating the message which needs to be passed to the API. And then here we have the main function where all the StreamGrid code is written. So st.title will set the title of the page or the main header. So this project is just audio transcription and summarization. So that's what I have written here. But if you're working on something else, you can set a different title here. Now I am using st.fileUploader function from StreamGrid package and this allows me to upload various files. But you can also mention the type, which type of files you want. So here I am allowing only WAV or mp3 format. Now here I am checking if the file has been uploaded. Then I am just reading the audio file. And now here I am creating a subheader of transcription where I will just show the transcript of the audio. And then the next subheader is the summary where I will show the summary and I am calling the summary function. And as this is the main function, I am calling the main function. So this is where the whole program starts. So as you can see, even if you don't know frontend, you can create frontend quite easily. This is a very simple frontend. Here I have not done a lot of customizations or I have not used a lot of different elements from StreamGrid. But you can build fairly complex frontend for your model depending on the use case. So we will be working on some more projects and some more use cases where we will build some really interesting StreamGrid UI for them. So if you are interested in that, stay tuned to subscribe to the channel. And now when you are done with your code, if you want to start your code, all you need to do is it's already running. So first let me close the app. And all you need to do is StreamGrid run your file name. So you need to put the relative path of that file. And all you need to do is press enter. So it will start and it will open it in a browser. So as you can see here, it's up and running. Now I will click on browse and I will try to find the audio file. There it is. It will take some time. So I have uploaded the file. Now it will take some time to transcribe the audio and then further it will take some time to create a summarization. So as you can see, it has created the transcription here. And it has done a fairly okay job in transcribing the audio. There are a few mismatches I would say. For example here, when there are some nouns like a person's name, it makes some mistakes there. It does not recognize them properly. But when it comes to general English words, I think it works quite well. And now here we have the summary of the transcript. As you can see here, there are two summaries. So this summary is coming from the stream grid. But then this is the summary which is being generated by the chart GPT itself. Because if you remember in the last video, we mentioned that generate an output in a markdown format. So what it is doing is it is creating a header which says summary. And then in the main body, it is suggesting you what's giving you the output of the summary function call. So as you can see, without writing any HTML or CSS, we were able to build some really nice UI and was able to run the or call the large language model for this specific use case from an UI and without having to look into the JupyterLab or your Google Colab notebook. The next step could be to deploy this. So to deploy, we need to create a GitHub repository. So if you're interested in seeing how to deploy in stream grid app, do let me know in the comment section. I will work on that.
Every three months things have just kept getting progressively better, and now we're at this point where we're talking about full-on vertical AI agents that are going to replace entire teams and functions and enterprises, that progression is still mind-blowing to me. A lot of the foundation models are kind of coming head-to-head, there used to be only one player in town with OpenAI, but we've been seeing in the last batch this has been changing. It's like competition is, you know, the soil for a very fertile marketplace ecosystem for which consumers will have choice and founders have a shot, and that's the world I want to live in. Welcome to another episode of The Light Cone. I'm Gary, this is Jared, Harj, and Diana, and collectively we've funded hundreds of billions of dollars worth of startups right when there were just one or two people starting out. And today, Jared is a man on fire, and he's going to talk about vertical AI. Yes, I am. I am fired up about this because I think people, especially startup founders, especially young ones, are not fully appreciating just how big vertical AI agents are going to be. It's not a new idea, some people are talking about vertical AI agents, we've funded a bunch of them, but I think the world has not caught on to just how big it's going to get, and so I'm going to make the case for why I think there are going to be 300 billion-dollar-plus companies started just in this one category. Nice. I'm going to do it by analogy with SaaS, and I think in a similar fashion, people don't understand just how big SaaS is because most startup founders, especially young ones, tend to see the startup industry through the lens of the products that they use as a consumer, and as a consumer, you don't tend to use that many SaaS tools because they're mostly built for companies. And so I think a lot of people have missed the basic point that if you just look at what Silicon Valley has been funding for the last 20 years, we've mostly been producing SaaS companies, guys. That's literally been most of what has been coming out of Silicon Valley. It's over 40% of all venture capital dollars in that time period went to SaaS companies, and we produced over 300 SaaS unicorns in that 20-year time period, which is way more than every other category. Software is pretty awesome. Software is pretty awesome. I was thinking back to the history of this because we always like to talk about how the history of technology informs the future, and the real catalyst for the SaaS boom was ... Do you guys remember XMLHttpRequest? Oh my God. I'd argue that that was quite literally the catalyst for the SaaS boom. Like Ajax. Ajax, yeah. In 2004, browsers added this JavaScript function XMLHttpRequest, which was the missing piece that enabled you to build a rich internet application in a web browser. So for the first time, you could make things in websites that looked like desktop applications, and then that created Google Maps and Gmail, and set up this whole SaaS boom. Basically, the key technology was that software moved from being a thing that you got on a CD-ROM and installed on your desktop, to being something that you used through a website and on your phone. Yeah. Paul Graham actually shares in that lineage in that he was one of the first people to realize that he could take the HTTP request and then actually hook it up to a Unix prompt, and you didn't actually have to have a separate computer program that would change a website. So VIAweb was an online store, kind of like Shopify, but way back in the day. Yeah, it was basically like the first SaaS app ever. Like, PG actually invented SaaS in 1995. It's just that those first SaaS apps kind of sucked because they didn't have XMLHttpRequest, and so every time you would click a button, you would have to reload the whole page. It's just a shitty experience, and so it didn't really catch on until 2005 when XMLHttpRequest widespread. Anyway, I see this LLM thing as actually very similar. It's a new computing paradigm that makes it possible to just do something fundamentally different, and in 2005, when cloud and mobile finally took off, there is this sort of big open question of, okay, will this new technology exist? What should you do with it? Where is the value going to accrue? Where are the good opportunities for startups? I was going through the list of all the billion dollar companies who were created, and I kind of had this realization that you could kind of bucket the different paths that people took into like three buckets. There's a first bucket that people started with, which was like, I would call them obviously good ideas that could be mass consumer products. So that's like docs, photos, email, calendar, chat, all these things that we used to do on our desktop, but that obviously could be moved to the browser and to mobile, and the interesting thing is zero startups won in those categories. One hundred percent of the value flowed to incumbents, like Google, Facebook, Amazon. They own all those businesses. Folks forget that Google Docs wasn't the only company that tried to bring Microsoft Office online. There were like 30 companies that tried to bring Microsoft Office online, but they all lost. Google won. There was like a second category, which was like mass consumer ideas that were not obvious that nobody predicted. That's like Uber, Instacart, DoorDash, Coinbase, Airbnb. Those ones came out of left field, like the dot dot dot between XML HTTP request and Airbnb is like very not obvious, and so the incumbents didn't even try competing in those spaces until it was like too late, and so startups are able to win there. And then there's a third category, which is all the B2B SaaS companies, and that's like 300 of them, and so by number of logos, way more billion dollar companies were created in that third category than the first two. I think one reason why that happened is like there is no like Microsoft of SaaS. Like there is no company that somehow does like SaaS for like every vertical and every product. Like for structural reasons, it seems to be the case that like they're all different companies, and that's why there's so many of them. I think Salesforce is probably like the first true SaaS company, and I remember Mark Benioff coming to speak at YC, and he tells the story as just very early on, people just didn't believe you could build sophisticated enterprise applications like over the cloud via SaaS. It was just so, there's like a perception issue, right? It was like, no, like you don't, you buy like a box software, and that's like the real software that you- This is the way we always do. It was quite contrary, because the early web apps sucked. They were like via web, where you had to be a visionary like PG, and understand that the browser was going to keep getting better, that eventually it'd be good. Which feels like quite reminiscent of today, right, where it's like, yeah, the same thing. Like, oh no, like you won't be able to build like sophisticated enterprise applications that use these LLM or AI tools, because they hallucinate, or they're not perfect, or they kind of like just toys. But yeah, it's like the early SaaS story is actually the same. And so when I think about the parallels with LLMs, I could easily imagine this same thing happening, which is that there's a bunch of categories that are like mass consumer applications that are obviously huge opportunities, but probably the incumbents will win all of those. So that's something like a general purpose AI voice assistant that you can ask it to do anything, and it'll like go do that thing. That's an obvious thing that should exist, but like all the big players are going to be competing to be that thing, right? Wow, Apple's a little slow on that one, but Siri's so stupid still, what year is it? It makes no sense. I mean, it's interesting, like it comes to that, it's like the very obvious thing is search, and maybe Google will still win on search, but perplexities definitely give them a huge run for their money, right? Yeah, this is the classic innovator's dilemma at the end of the day. I mean, you could argue, going back to what you said about Uber or Airbnb, these are actually really risky things from a regulatory standpoint. So if you're Google and you have basically a guaranteed giant pot of gold that sort of comes to you every single month, like why would you endanger that pot of gold to sort of pursue these things that might be scary or might ruin the pot of gold? I think that's like probably the primary reason why the incumbents didn't end up building those products and didn't even clone them, even after they got big, and it was obvious that they were going to work, Google never launched an Uber clone, they never launched an Airbnb clone. I was listening to this talk by Travis, and one of the things that he said that really stuck with me is that in the first use of Uber, he was very scared that he was going to personally go to prison for like a long time, like he was actually personally risking going to prison in order to build that company. And so yeah, no highly paid Google exec was going to do that. What do you think about why the incumbents didn't go into B2B SaaS? Is it part of the reason it's that a lot of the use cases are very, there's a very wide distribution? It's a great question. I love to hear what you guys think. My take is that it's just too hard to do that many things as a company, like each B2B SaaS company really requires like the people who are running the product and the business to be extremely deep in one domain and care very deeply about a lot of really obscure issues. You know, like take like Gusto, for example, like, why didn't Google build a Gusto competitor? Well, there's no one at Google who really understands payroll, and has the patience to like deal with all the nuances of all these like stupid payroll regulations and like, it's just like, like, it's just not worth it for them. It's easier for them to just focus on like a few really huge categories. In the B2B SaaS world, it's sort of about the unbundling, bundling of software argument that comes up a lot as well, I think, and why did all these vertical B2B SaaS products evolve versus just like Oracle or SAP or NetSuite, just owning like everything. And I think it might be also, there's another thing that's attributable to the shift to like SaaS and the internet is in the old ways of selling software, again, like you have this box software that was really like, expensive to install, and you have like a whole ecosystem around it. And anytime you wanted something custom, like the integrators would just say, Oh, no, like we can like just build you a custom like payroll feature or something like that. And then Salesforce comes along with like a SaaS solution. And it just seems like it could never be as powerful or sophisticated as like the expensive enterprise installation you just paid for, but they proved that it totally was the case. And I think that just like opened the gates for all of these like vertical SaaS solutions to emerge doing exactly what you're saying. The problem is that with a lot of this enterprise software, if you're a user of Oracle and NetSuite, because they have to cover so much ground, the user experience is actually pretty bad. They're trying to be jack of all trades, but master of none. So it ends up being a bit of a kitchen sink type of experience. And this is where if you go and build a B2B SaaS vertical company, you could do literally a 10x better experience and more delightful because there's this stark difference between consumer products and enterprise user experience. Well, there's only what three price points in software. It's $5 per seat, $500 per seat or $5,000 per seat. And that maps directly to consumer S&P or enterprise sales. And then I think time immemorial has taught us that in the past, and this is less and less true with new software, thankfully, but enterprise is terrible software because it's not the user buying it. Some high up muckety-muck inside a Fortune 1000 is the person who's getting wined and dined for this mega seven-figure contract, and they're going to choose something that maybe isn't that good actually for the end user, the person who has to actually use the software day-to-day. And I'm sort of curious to see how this changes with LLMs actually. I mean, to date, one of the more salient things that we've seen for both S&P and enterprise software companies is that, or all software companies, all startups, period, is like there's a sense that as revenue scales, the number of people you have to hire scales with it. And so when you look at Unicorns, even in today's YC portfolio, it's quite routine to see a company that reached $100 or $200 million a year in revenue, but they have like 500, 1,000, 2,000 employees already. And I'm just going to be very curious, like even the advice that I'm starting to give companies that are a month or two out of the batch, it's feeling a little bit different than the kind of advice I would give last year or two years ago. In the past, you might say, let me find the absolute smartest person in all of these other parts of the org, like customer success or sales or different things like that. And I want to find someone who I've worked with, who I know is great, and then I'm going to go sit on their doorstep until they quit their job and come work for me. And I want them to be someone who can build a team for me, hire a lot of people. That might still be true, but I'm starting to sense that the meta is shifting a little bit. Like you actually might want to hire more really good software engineers who understand large language models, who can actually automate the specific things that you need that are the bottlenecks to your growth. And so it might result in a very subtle, but significant change in the way startups grow their businesses, sort of post-product market fit. It means that I'm going to build LLM systems that bring down my costs, that cause me not to have to hire a thousand people. I think we're right at the beginning of that revolution right now. I mean, we talked about this in a previous episode. We talked about there will be a future unicorn company that's only run, if we take it to the limit, with only 10 employees. That's completely plausible. And they're writing the evals and the prompts. That's it. I think what you're saying is a trend that was already underway pre-LLM. I remember when I was running TripleByte, for example, we needed to build a marketing or customer user acquisition, basically. And especially after we raised our Series B, the traditional way you were supposed to do that is to hire a marketing executive and build out a marketing team. And just basically spin up this machine to do sales and marketing. But I'd actually met a YC founder, Mike, whose company was basically building a smart frying pan. Sounds bizarre. But he was an MIT engineer. I remember that. Yeah, you remember this? He's an MIT engineer. And to sell the smart frying pan, he had to get really, really good at understanding paid advertising and Google Ads and just a whole bunch of stuff. And so he'd taken this engineer's mindset approach to it. And I remember just talking to him about it and realizing this would be so much better to have an MIT engineer working on our marketing efforts than any of the marketing candidates I've spoken to. And he was able to scale us up to, we were spending a million dollars a month on just marketing and various campaigns. And TripleByte had great marketing. I remember the Caltrain symptom station takeover that you did, all the out of home stuff that you did. It was really high quality stuff. You could tell that he was not being done by some deep marketing person. And that was all Mike. And the comment I would often get when people would ask me around that time, how big is TripleByte? And we were like, 50 people. And I would be able to be like- It got so much better. Yeah, yeah. I'd be like, I thought it was hundreds of people. I was like, no, it's all because if you put a really smart engineer on some of these tasks, they just find ways to make, they find leverage. And now LLMs can go even way beyond the leverage you had with just pure software. Okay, so here's my pitch for 300 vertical AI agent unicorns. Literally every company that is a SaaS unicorn, you could imagine there's a vertical AI unicorn equivalent in some new universe. Because most of these SaaS unicorns, beforehand, there was some box software company that was making the same thing. That got disrupted by a SaaS company. And you could easily imagine the same thing happening again, where now basically every SaaS company builds some software that some group of people use. And the vertical AI equivalent is just going to be the software plus the people in one product. One thing might be just enterprises in general right now are a little unsure about what exactly they, what agents they need. And one approach I've seen from especially more experienced founders, like Brett Taylor, CTO of Facebook, SaaS company, Sierra, I don't know all the details, but as far as I can tell, it's essentially more broadly about letting enterprises deploy these AI agents and spinning them up like custom for the enterprise versus like, oh, hey, we have like this specific agent to do this. It's something I've seen from one of my companies called VectorShift that were funded about a year ago. They're two really smart, like Harvard computer scientists. And what they found is that they're trying to build a platform to make it easy for enterprises to build their own, like use like no code or SDKs to build their own internal LLM powered agents. But like enterprises often don't know exactly what they want to use these things for. And so bringing it back, I wonder if like in like the box software world, you started off with just like a few vendors who just basically were trying to convince people to use software at all. And it was just like, it does everything. And then it gets more sophisticated and higher resolution and you get lots of like vertical SaaS players. We go through that same period with LLMs where the early winners might just be these like general purpose. We like make it easy for you to do LLM stuff and then the vertical agents will come in over time. Or do you think there's reasons it's different now and the vertical agents will take off on day one? Yeah, that's interesting because if you think about the history of SaaS, the consumer things worked first. Like 2004 and 2010 was mostly consumer applications like email and chat and maps and people as individuals got used to using these tools themselves. And I think that made it easier to sell SaaS tools to companies because the same people are both employees and consumers. Yeah. I think the answer might just be like, this is all just a continuation of software and there's no reason it has to reset back. Like LLMs don't have to reset back to a few general purpose like enterprise LLM platforms doing everything because enterprises have already been trained on like the value of point solutions and vertical solutions. And like the user experience is not going to be that different. These things will just be a lot more powerful. And so if enterprises have already built the muscle of believing that like startups or vertical solutions can be better than like legacy broad platforms, they are probably going to be willing to take a bet on a startup promising a very good vertical AI agent solution today. And I feel like we're all seeing that in the batch now where some of our companies are getting faster traction in enterprises for these vertical AI agents than like we've ever seen before. I think we're just early in the game, right? Like all software sort of starts quite vertical and then as the industries actually get much more developed, then I mean, I just answered my earlier question. It's like, you know, why does a company end up having a thousand employees? It's actually that, you know, early, early in the game, everyone's making these specific point solutions. And then at some point you've got to go horizontal, like you're already doing this crazy spend on sales and marketing. And then the only way you can actually continue to grow once you sort of get a hundred percent or, you know, some large majority of the market is you actually have to do like not just a point solution, but things that sort of work together. Maybe the other point of why the bull case for vertical AI agents could be even bigger than SaaS is that SaaS, you still needed an operations team or set of people to operate the software in order to get all the workflows to be done. I don't know, approval workflows, or you have to input the data. The argument here is that you will get not only replacing all that set of SaaS software, so that will be like one-to-one mapping, but it's also going to eat all of the, a lot of the payroll. Because if you look at a lot of the spend for companies, big chunk is still a payroll and software is tiny. Exactly. So they're spending more on employees than they do on software. So maybe these smaller companies are way more efficient that need way less humans to do random data entry or approvals or click the software. I agree. I think it's very possible that the vertical equivalence will be 10 times as large as the SaaS company that they are disrupting. I mean, there's two cases. It could be that the vertical point solution could be just big enough and you don't need to do that breath thing, right? That could be a nice scenario. Should we give some examples? I feel like we've always been working with so many vertical AI agent companies. We've got like news from the front of how it's actually going. Well, your former head of product, Aaron Cannon, is working on a YC company called Outset that I worked with. And basically they're taking LLMs to the surveys and Qualtrics space. So Qualtrics is almost certainly not really going to build the best of breed large language model with reasoning. And then the funny thing about surveys is, you know, who's it actually for? It's for people who run products, for marketing teams, it's for people who are trying to make sense of like what do our customers actually want and what are surveys like? Guess what? That's language. So and then I feel like these types of businesses actually have to thread this needle because enterprise and SMB software often is sold based on a particular person who is the key decision maker and you have to go high enough in the organization so that the people you're selling to are not afraid that their whole their job and or their whole team's job is going to go away. Totally. That's kind of a move that I've seen that a lot of companies that sell need to do because if you're going to go and sell to the team, that's going to get replaced by AI. They're going to sabotage it man. It just does not work. So I think this is an interesting way that a lot of these are top down and you have to go through. At some point you get the CEO to sign off on it. A company I'm working with, Momentic, that's essentially an AI agent but for at least where they're starting QA testing, they're getting really great traction right now and it's interesting because do you remember a decade ago why companies that we worked with, Rainforest QA, like Rainforest was a QA as a service company and that they had this exact tension of where they couldn't actually replace your QA team and so they needed to build software that made the QA team more efficient but really that obviously meant trying to replace as many of them as possible. They couldn't replace the whole team and so they were always on this sort of tightrope between trying to sell the software to the head of engineering as if this will mean you'll need less QA people and great, but then you also have to go sell that to the QA team who don't want to be replaced. So I think that was always a friction for that business for how it could scale and grow but now Momentic with AI can actually just replace the QA people so their pitch is not oh this makes your QA people faster, it's like this just means you don't need a QA team at all so they can just focus the sell onto engineering and engineering doesn't need buy-in from QA at this point and you can also go in, I mean to start with, you can go and sell to companies that don't even have big QA teams at the moment, they just use something like Momentic and then it will just keep scaling with them. Scaling and they'll just never build a QA team ever. That is a real life case study of what Diana was saying about why these vertical AI agent companies can be 10 times as big as the SaaS companies. I'm seeing this interesting now, like in recruiting too, I had this exact same issue with Triple Bite where to build the software, to build software that makes it easy to screen and hire software engineers, you need buy-in from both the engineering team that they're joining but also the recruiting team and effectively the software we were building was trying to replace the recruiters but we couldn't completely replace the recruiters but now with NYC... Yeah, so the recruiters were always like opposing it because it was a threat to them. Yeah, so there's always like friction on like how far you can get when the customer you're trying to sell to is worried about being replaced but yeah, I think now, it's still early days but now with AI, you can build things that do the whole sack like of recruiting. We have a company we worked with last patch, like Niko, work with them, aPriora, which is actually just doing like the full like technical screen, the full initial recruiter screen and getting great traction. So I think as those things keep going, like they won't have the same thing, you won't have the friction of, oh, I need to convince recruiters to use this, you're probably just like not build a recruiting team in the same way that you used to. Another example is even for dev tool companies, they have to do a lot of developer support and I work with this company called Cabal.ai that basically built one of the best chatbots that responds to a lot of the technical details that are hard to answer and I think a lot of the companies that started using them, they actually ended up having dev rel teams that are a lot smaller because it ingests a lot of the developer documentations, even the YouTube videos that dev tools put up and even a lot of the chat history, so it just keeps getting better and better and it gives really good answers actually, it's one of the best I've seen. Yeah, I also work with a customer support, like an AI customer support agent company called Powerhelp, well actually we both did last patch and I learned a couple interesting things from Powerhelp. The first is customer, like AI agents for customer support was like the category that's like famously crowded where there's supposedly like 100 of them and if you go and you Google like AI customer support agent, you'll get like 100 results on Google, but what I learned through working with Powerhelp is like, it's actually kind of bullshit, like almost all of those companies are doing very simple like zero shot LLM prompting that can't actually replace a real customer support team that does a lot of really complicated workflows, it just kind of makes for like a nice demo, like to actually replace a customer support team for like an at scale company that has like 100 customer support reps to do lots of complicated things with every day, you need like really complicated software that does all the stuff that like Jake Heller was talking about and there were only like three or four companies that were even attempting to do that and cumulatively they had like less than 1% market penetration and so the market was just completely open. I could also see that being another case of hyper specialization or hyper verticalization, like there's not going to be, I mean maybe eventually there could be a single general purpose customer support agent software company, but we're like in any, you know, that will be like an eighth or ninth inning kind of thing and we're literally in the first inning, so you know, instead, you know, you're going to have companies like Giga ML, you know, it's doing it for Zepto, doing 30,000 tickets every single day and replacing a team of 1,000 people and, but it's very specific and it has, you know, it's not a general purpose demo wear kind of thing, like it's 10,000 test cases and a very detailed eval set that, you know, is basically just for Zepto and things like Zepto, but if you are, you know, any of the other marketplace companies, you're probably going to use it because like that's a very well defined kind of marketplace that's, you know, instant delivery marketplace. I think this is the kind of dynamic that led there to be like $300 billion SaaS companies rather than one like $10 trillion like meta SaaS thing that provides all the software for the world, it's just like the customers just require really heavily like tailored solutions and it's hard to build one that like works for everyone. Exactly, I mean we already gave three examples of customer support, but they're very different protocols, it's like dev tool companies, very different kind of support that you need and the training set to marketplaces, very different, right? Yeah, I guess whether you have agents or real human beings working for you, you end up with the same problem, which is every company bumps up against Coase's theory of the firm, which says that any given firm will grow only so much to the point where it becomes inefficient to be larger than that and then that's why there are sort of networks and ecosystems and, you know, a full-blown economy, you know, like every firm will sort of specialize to do what it is particularly good at and then the limits, the outer limits of what those firms can be, it's actually based on your ability as a manager. So yeah, that part a little bit breaks my brain because, you know, when we spend time with Parker Conrad at Rippling, one of his favorite points is actually, well, you know, everyone's very obsessed with the fact that the rocks can talk and, you know, maybe they can draw, but the more interesting thing for him, you know, running HR IT software that, you know, he spends a lot of time thinking about HR, like actually the coolest thing about the LMs is that the rocks can read and from his perspective, like, you know, he's, yeah, I think he has 3,000 employees, he still runs payroll for all 3,000 employees through Rippling. So I think he spends a lot of time thinking about like how can one person extend their ability as a manager and I think we're going to see a lot more there. That would be a reverse argument that if we're at this moment where tools for managers and CEOs are going to get much more powerful. Oh, it can increase the scale of the firm that you can run. Right. And that's certainly what Rippling is trying to do. Yeah, this is sort of the war, right? He's attempting to build this like suite of HR tools where if he wins, he's going to eat a whole bunch of billion-dollar SaaS companies in like one giant company. That's a very interesting point, Gary. I think what made me think about this is that with having all these AI SaaS tools, it's going to give the ability to all these leaders and all these orgs to basically open the aperture of the context window of how much information they can parse because there's a limit of how much as humans we can have meaningful relationship. There's like the whole thing with the Dunbar number. It's about 300 people that you can have a meaningful relationship with. But with AI, because all of these rocks now can read, I think we will be able to extend that Dunbar limit that we have. Yeah, I think Flo Crivello had this interesting post on Twitter that went viral around, I think someone had made a voice chat like just weekend project as a CEO, but it would call all 1,500 of their employees. Mm-hmm, yeah. And it was a very short call, kind of sounded like it was from the CEO, just asking kind of personally. It sort of reminds me of that scene in Her where it zooms out. And actually, you're following the experience of one person using the Her OS, but actually that Her OS is actually speaking to thousands or tens of thousands of people all at one time. How many others? 8,316. Yeah, I mean, large language models can talk and can have conversations. And then to what extent can this power actually extend the capability of one or a few people to understand what's going on? I heard about that, Yusuke. It definitely got me thinking, because as I understood it, the project is something like it just, it will call up all your employees, and then your employees can just ramble about what they've been doing, and it will just extract the meaning out of it and give the CEO a bullet point summary of, here's the most important stuff. And there were a bunch of SaaS companies that attempt to do these sort of weekly pulses from employees using traditional SaaS software. But that version is literally 100 times better than the pre-L1 version of this idea. But I wonder with that particular tool, it's going beyond just reading and summarizing. This is the argument of if writing is thinking, then there's actually just a huge amount of work that's involved in the effort of figuring out who's an effective communicator and what are the most important things to be, what are the key things to be focused on as a company? And I just wonder if that, at some point, do the LLMs do, they go beyond just summarizing and reading and doing actual thinking, at which point, who's actually running the organization? That's an interesting thought. I guess the other thing that's kind of interesting about how Parker Conrad's thinking about it is I found out about this recently off an interview with Matt McGinnis, the COO, that there are more than 100 founders who work at Rippling now as sort of specific people who run like an entire SaaS vertical inside Rippling. It's super cool the way he's built the team. He probably knows a lot about it because you've done a bunch of interviews with him. Yeah, I mean, it's definitely very focused on recruiting founders. I mean, Rippling is essentially the case against vertical, little verticalization of software, right? It's actively trying to horizontalize and take over all of HR and IT software. Yeah, but the whole thesis is basically there's this underlying platform that has lots of value and he wants to recruit founders and teams that build on top of the platform. Now, you're talking a little bit more sort of like Amazon-esque, where it's like shared infrastructure. Yeah, I think every product that they've released, I mean, things like time tracking and whatnot. I mean, basically, they launch a thing and it hits like multi-millions of dollars in ARR on day one of launching. And that's exactly what we were talking about earlier. Like once you have a vertical, once you have a toehold, what you're saying is, well, I have to spend this money on sales and marketing anyway. Can I basically get higher LTV and hold my CAC constant? And that's sort of what if you look at all the top software companies today, that's what Oracle is, that's what Microsoft is, that's what Salesforce is. Rippling, knock on wood, going to be the next. But it's an interesting alternative to going from zero to one totally on your own. Tia, I just want to talk about some of the voice companies that we have. I think that's an interesting subcategory of this stuff that's really blowing up now. I have a company that I work with called Salient that basically does AI voice calling to automate a lot of that collection in the auto lending space, which traditionally- So they call up people and it's like, hey, you owe $1,000 on your car. Yeah, which actually- What's up with that? Actually, this kind of job is one of those butter passing job. It kind of sucks because a lot of these low wage workers work in all these call centers and it's like a terrible, boring job. So very high churn and giant headcount to run these because there's just so many accounts with these banks that have to do that. And this is a perfect task that AI could automate. And what Salient has done is it has been able to actually get very, very accurate and it has been going live with a lot of big banks, which is super exciting. And this is a company from last year and demonstrating that part of it that they were able to get in because they sold through top down. I guess the space feels like it's moving very quickly and that we have incredible companies that are voice for companies like Vapi and then people can sort of get started right away and retail also. I mean, these companies that have reached pretty fast scale just because it's one of the more exciting, mind blowing things that you can get up and running within, I mean, literally the course of hours. And then some of the question that remains unanswered and we hope they figure it out is how do you hold on to them, especially as you run into things like the new OpenAI voice APIs. Do you go direct? It's probably way more work to try to use the underlying APIs off the bat, but these platforms are clearly low bar. And then the question is, can you keep raising the ceiling so that you can hold on to customers forever? Hartz, you were making an interesting point earlier about how the apps that people have built on top of LLMs has changed from early 2023 when it started until now. Voice, which we were just talking about, is a great example of this. I think even if you went six months back, it felt like the voices were not realistic enough yet. The latency was too high. It felt like we were probably a ways off having AI voice apps that could meaningfully replace humans calling people up. And here we are. And yeah, I was just zooming out, thinking back to the first YC batch where LLM-powered apps first came in. It was probably winter 2023, almost two years ago now. And the apps were essentially just things that spat out some text and not even perfect text. The Ruxkit talk, that's about it. Yeah, sort of more like copy editing, marketing edit, email edits. It was just kind of more like just incremental. I had a company, I mean, the one that sticks in my head is a company called Speedy Brand. And what they did is make it very easy for a small business to just generate a blog and spit out content marketing. It was a very obvious idea. It wasn't perfect, but it was pretty cool at the time. And we've talked about it a bunch in the show, but that was the chat GPT wrapper turned out around that time. So, hey, this is what an LLM app looks like. It's just a chat GPT wrapper. It does very basic, spits out some text. Like, it's going to get crushed by OpenAI in the next release. And it did. Well, I don't know if that one did, but that first wave of LLM apps mostly did get crushed by the next wave of GPTs. But I feel like we've had this sort of boiling of the frog effect where from an app, it's sort of like every three months, things have just kept getting progressively better. And now we're at this point where we're talking about like full-on vertical AI agents that are going to replace entire teams and functions and enterprises. And just that progression is still mind-blowing to me. Like, we're two years in, which is still relatively early. And the rate of progress is just like, unlike anything we've seen before. And I think what's interesting to see is we discussed this in the last episode, is a lot of the foundation models are kind of coming head to head. There used to be only one player in town with OpenAI, but we've been seeing in the last batch, this has been changing. Claude is a huge contender. Thank God. It's like competition is, you know, the soil for a very fertile marketplace ecosystem for which consumers will have choice and founders have a shot. And that's the world I want to live in. So people are watching and thinking about starting a startup or maybe have already started, and they're hearing all of this. How do you know what the right vertical is for you? You gotta find some boring, repetitive admin work somewhere. And that seems to be the common thread across all of this stuff, is if you can find a boring, repetitive admin task, there is likely going to be a billion-dollar AI agent startup if you keep digging deep enough into it. But it sounds like you should go after something that you directly have some sort of experience or relationship to. There's definitely a common thread I've seen in the companies that I'm seeing promise with. And another one just pops into my head, sweet spot. I think I mentioned on this before, like they're basically building an AI agent to bid on government contracts. And the way they found that idea instead of a year ago was they just had a friend whose full-time job was to sit there on like a government website, like refreshing the page, like looking for new proposals to bid on. And they were pivoting. They're like, oh, like that seems like something an LLM could do. A company from a recent batch, which pivoted into a new idea that's getting great traction, like they're basically building an AI agent to do process like medical billing for dental clinics. And the way they found the idea was one of the founder's mother is a dentist. And so he just decided to go to work with her for a day and just sit there seeing what she did. And she's like, oh, like all of that, like processing claims seems like really boring, like an LLM should totally be able to do that. And he just started writing software for like his mother's dental clinic. So I guess, I mean, in robotics, the classic maxim is, you know, the robots that are going to be profitable and that are going to work are going to be dirty and dangerous jobs. And in this case for vertical SaaS, look for boring, butter-passing jobs. Well, with that, we're out of time for today. We'll catch you on the light cone next time.
Hello everyone, welcome to Programming Credit. This is the continuation of the last video where we worked on audio transcription summarization using ChargeGPD, but the code was all in Google Colab. So if you have not watched that video and if you want a detailed code walkthrough, you can watch that video first and then come back to this video because in this video what we will try to do is we will try to create a stream data. So basically there will be a frontend using which the users can interact with that application and they don't need to fiddle around the code itself. So if you are someone who knows the nitty-gritty of the code, you can definitely use it in your Google Colab or in your JupyterLab. But if you are someone who is from non-technical background and who just wants a simple UI where they can interact with the large ranger model, I think this is going to be really helpful for you. So yeah, this is what exactly we will be working on in this video. But before moving further, if you are new here, please subscribe to the channel and be a part of Programming Credit family. And also hit the bell icon so that you get notified each time when a video goes live. And if you end up liking this video or find this video helpful, please give it a thumbs up. It keeps me motivated to make such videos for you guys. And if you want to be a part of Programming Credit community, you can also join Telegram group or Discord server. Link will be in the description. So with that being said, let's get this video started. First, let me give you a walkthrough of the application itself. It's a fairly straightforward application. And then I will take you to the code and I will give you a code walkthrough. So when you start the Streamlit app, you will get the option to upload your audio file which you can upload using this browse files button. And once you upload your file, we will use the Google services to transcribe the audio and then we will pass this transcription to the chat BPD API to summarize it for you. And then you will be able to see the summary here. So this is basically a small snippet from one of my videos. So I extracted the audio and I took what, one minute audio from that full audio file and then I tried summarizing it. Now let's jump into the code and see what we have to do to create this simple UI to interact with the model to summarize the audio transcription. So this video, I will not talk about the specifics or the description of each and every line because I've already explained this in the last video. But what I will do is I will talk about the Streamlit part of it. So on top here, we have all the imports. Most notably or the different one from the last video is this Streamlit one using which we will use different features from Streamlit. In this line seven, I am reading the secrets from this secrets file, secrets.toml. So I have added my API key there. So if I have to show you, you can see how the secrets.toml looks like. I've just created a header here and then I've stored the API key. And if I have to call it in my app.py file, I'm just going to do st.secrets and then I will read the API key. Now I will use this API key to create an object of OpenAI. Now here I'm just setting the system prompt and this is the function which will transcribe the audio. And now this is going to be the function where all the summarization will happen. So in this function, I'm calling transcribeAudio to get the transcripts. And then here I'm also calling the message function where I am creating a message which needs to be passed to the API. And then here we have the main function where all the Streamlit code is written. So st.title will set the title of the page or the main header. So this project is just audio transcription and summarization. So that's what I have written here. But if you're working on something else, you can set a different title here. Now I'm using st.fileUploader function from Streamlit package and this allows me to upload various files. But you can also mention the type, which type of files you want. So here I'm allowing only WAV or mp3 format. Now here I'm checking if the file has been uploaded. Then I'm just reading the audio file. And now here I'm creating a subheader of transcription where I will just show the transcript of the audio. And then the next subheader is the summary, where I will show the summary and I'm calling the summary function. And as this is the main function, I am calling the main function. So this is where the whole program starts. So as you can see, even if you don't know frontend, you can create frontend quite easily. This is a very simple frontend. Here I have not done a lot of customizations or I have not used a lot of different elements from Streamlit. But you can build fairly complex frontend for your model depending on the use case. So we will be working on some more projects and some more use cases where we will build some really interesting Streamlit UI for them. So if you are interested in that, stay tuned to subscribe to the channel. And now when you're done with your code, if you want to start your code, all you need to do is, it's already running. So first let me close the app. And all you need to do is Streamlit run your file name. So you need to put the relative path of that file. And all you need to do is press enter. So it will start and it will open it in a browser. So as you can see here, it's up and running. Now I will click on browse. And I will try to find the audio file. There it is. It will take some time. So I have uploaded the file. Now it will take some time to transcribe the audio. And then further it will take some time to create a summarization. So as you can see, it has created the transcription here. And it has done a fairly okay job in transcribing the audio. There are a few mismatches, I would say. For example here, when there are some nouns, like a person's name, it makes some mistakes there. It does not recognize them properly. But when it comes to general English words, I think it works quite well. And now here we have the summary of the transcript. As you can see here, there are two summaries. So this summary is coming from the stream grid. But then this is the summary which is being generated by the chart GPT itself. Because if you remember in the last video, we mentioned that generate an output in a markdown format. So what it is doing is it is creating a header, which says summary. And then in the main body, it is suggesting you what's giving you the output of the summary function call. So as you can see, without writing any HTML or CSS, we were able to build some really nice UI and was able to run the or call the large language model for this specific use case from an UI and without having to look into the JupyterLab or your Google Colab notebook. The next step would be to deploy this. So to deploy, we need to create a GitHub repository. So if you're interested in seeing how to deploy in stream grid app, do let me know in the comment section. I will work on that and
