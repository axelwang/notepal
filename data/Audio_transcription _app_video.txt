Hello everyone, welcome to Programming Credit. This is the continuation of the last video where we worked on audio transcription summarization using ChargeGPD, but the code was all in Google Colab. So if you have not watched that video and if you want a detailed code walkthrough, you can watch that video first and then come back to this video because in this video what we will try to do is we will try to create a stream data. So basically there will be a frontend using which the users can interact with that application and they don't need to fiddle around the code itself. So if you are someone who knows the nitty-gritty of the code, you can definitely use it in your Google Colab or in your JupyterLab. But if you are someone who is from non-technical background and who just wants a simple UI where they can interact with the large-ranging model, I think this is going to be really helpful for you. So yeah, this is what exactly we will be working on in this video. But before moving further, if you are new here or if you are a subscriber to the channel, please go ahead and subscribe to the channel and be a part of the Programming Credit family. And also hit the bell icon so that you get notified each time when a video goes live. And if you end up liking this video or find this video helpful, please give it a thumbs up. It keeps me motivated to make such videos for you guys. And if you want to be a part of the Programming Credit community, you can also join the Telegram group or Discord server. Link will be in the description. So with that being said, let's get this video started. First, let me give you a walkthrough of the application itself. It's a fairly straightforward application. And then I will take you to the code and I will give you a code walkthrough. So when you start the StreamGrid app, you will get the option to upload your audio file, which you can upload using this Browse Files button. And once you upload your file, we will use the Google services to transcribe the audio. And then we will pass this transcription to the chat GPT API to summarize it for you. And then you will be able to see the summary here. So this is basically a small snippet from one of my videos. So I extracted the audio and I took one minute audio from that full audio file and then I tried summarizing it. Now let's jump into the code and see what we have to do to create this simple UI to interact with the model to summarize the audio transcription. So in this video, I will not talk about the specifics or the description of each and every line because I've already explained this in the last video. But what I will do is I will talk about the StreamGrid part of it. So on top here, we have all the imports. Most notably, or the different one from the last video is this StreamGrid one, using which we will use different features from StreamGrid. In this line 7, I am reading the secrets from this secrets file, secrets.toml. So I have added my API key there. So if I have to show you, you can see how the secrets.toml looks like. I've just created a header here and then I've stored the API key. And if I have to call it in my app.py file, I am just going to do st.secrets and then I will read the API key. Now I will use this API key to create an object of OpenAI. Now here I am just setting the system prompt and this is the function which will transcribe the audio. And now this is going to be the function where all the summarization will happen. So in this function, I am calling transcribeAudio to get the transcripts. And then here I am also calling the message function where I am creating the message which needs to be passed to the API. And then here we have the main function where all the StreamGrid code is written. So st.title will set the title of the page or the main header. So this project is just audio transcription and summarization. So that's what I have written here. But if you're working on something else, you can set a different title here. Now I am using st.fileUploader function from StreamGrid package and this allows me to upload various files. But you can also mention the type, which type of files you want. So here I am allowing only WAV or mp3 format. Now here I am checking if the file has been uploaded. Then I am just reading the audio file. And now here I am creating a subheader of transcription where I will just show the transcript of the audio. And then the next subheader is the summary where I will show the summary and I am calling the summary function. And as this is the main function, I am calling the main function. So this is where the whole program starts. So as you can see, even if you don't know frontend, you can create frontend quite easily. This is a very simple frontend. Here I have not done a lot of customizations or I have not used a lot of different elements from StreamGrid. But you can build fairly complex frontend for your model depending on the use case. So we will be working on some more projects and some more use cases where we will build some really interesting StreamGrid UI for them. So if you are interested in that, stay tuned to subscribe to the channel. And now when you are done with your code, if you want to start your code, all you need to do is it's already running. So first let me close the app. And all you need to do is StreamGrid run your file name. So you need to put the relative path of that file. And all you need to do is press enter. So it will start and it will open it in a browser. So as you can see here, it's up and running. Now I will click on browse and I will try to find the audio file. There it is. It will take some time. So I have uploaded the file. Now it will take some time to transcribe the audio and then further it will take some time to create a summarization. So as you can see, it has created the transcription here. And it has done a fairly okay job in transcribing the audio. There are a few mismatches I would say. For example here, when there are some nouns like a person's name, it makes some mistakes there. It does not recognize them properly. But when it comes to general English words, I think it works quite well. And now here we have the summary of the transcript. As you can see here, there are two summaries. So this summary is coming from the stream grid. But then this is the summary which is being generated by the chart GPT itself. Because if you remember in the last video, we mentioned that generate an output in a markdown format. So what it is doing is it is creating a header which says summary. And then in the main body, it is suggesting you what's giving you the output of the summary function call. So as you can see, without writing any HTML or CSS, we were able to build some really nice UI and was able to run the or call the large language model for this specific use case from an UI and without having to look into the JupyterLab or your Google Colab notebook. The next step could be to deploy this. So to deploy, we need to create a GitHub repository. So if you're interested in seeing how to deploy in stream grid app, do let me know in the comment section. I will work on that.
